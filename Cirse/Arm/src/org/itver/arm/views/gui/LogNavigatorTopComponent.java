/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.itver.arm.views.gui;

import java.util.logging.Logger;
import org.itver.arm.controls.controllers.LogController;
import org.itver.arm.models.nodes.log.LogNode;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;

/**
 * Ventana que muestra los nodos del Log.
 */
@ConvertAsProperties(dtd = "-//org.itver.arm.views.gui//LogNavigator//EN",
autostore = false)
public final class LogNavigatorTopComponent extends TopComponent
                                            implements ExplorerManager.Provider{

    private ExplorerManager manager;

    private static LogNavigatorTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "LogNavigatorTopComponent";

    public LogNavigatorTopComponent() {
        initComponents();
        initManager();
        setName(NbBundle.getMessage(LogNavigatorTopComponent.class, "CTL_LogNavigatorTopComponent"));
        setToolTipText(NbBundle.getMessage(LogNavigatorTopComponent.class, "HINT_LogNavigatorTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();
        field = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        field.setText(org.openide.util.NbBundle.getMessage(LogNavigatorTopComponent.class, "LogNavigatorTopComponent.field.text")); // NOI18N
        add(field, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField field;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized LogNavigatorTopComponent getDefault() {
        if (instance == null) {
            instance = new LogNavigatorTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the LogNavigatorTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized LogNavigatorTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(LogNavigatorTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof LogNavigatorTopComponent) {
            return (LogNavigatorTopComponent) win;
        }
        Logger.getLogger(LogNavigatorTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        this.field.addActionListener(LogController.singleton());
    }

    @Override
    public void componentClosed() {
        this.field.removeActionListener(LogController.singleton());
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.manager;
    }

    private void initManager() {
        this.manager = new ExplorerManager();
        manager.setRootContext(LogNode.singleton());
        this.associateLookup(ExplorerUtils.createLookup(manager, this.getActionMap()));
    }
}
