/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RotationPan.java
 *
 * Created on 24-feb-2011, 18:37:38
 */

package org.itver.arm.views.gui;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.itver.arm.models.elements.Axis;

/**
 * Panel con lider y Spinner, generalmente ligado a la información de un Eje de
 * algún Element.
 * @author pablo
 */
public final class RotationPan extends javax.swing.JPanel
                               implements ChangeListener{

    private Axis axis;

    /**
     * Constructor default, inicializa los componentes.
     */
    public RotationPan() {
        initComponents();
        this.addChangeListener(this);
    }

    /**
     * Constructor que asigna un eje con el panel.
     * @param axis eje ligado al panel.
     */
    public RotationPan(Axis axis){
        this();
        this.setAxis(axis);
    }

    /**
     * Actualiza los valores del slider respecto al spinner y viceversa.
     * @param e 
     */
    @Override
    public void stateChanged(ChangeEvent e) {
        if(e.getSource() == this.slider){
            this.spiner.setValue(this.slider.getValue());
            this.slider.setToolTipText("" + this.slider.getValue());
        }
        else{
            double realVal = Double.valueOf(this.spiner.getValue().toString());
            int val = Math.round((float)realVal);
            if(//val != null &&
               val >= this.slider.getMinimum() &&
               val <= this.slider.getMaximum())
                this.slider.setValue(val);
            else
                this.spiner.setValue(this.slider.getValue());

        }
    }

    /**
     * Activa o desactiva los componentes de este panel.
     * @param enabled Estado de activación de los componentes.
     */
    @Override
    public void setEnabled(boolean enabled){
        super.setEnabled(enabled);
        this.slider.setEnabled(enabled);
        this.spiner.setEnabled(enabled);
    }

    /**
     * Agrega un oyente a los componentes del panel.
     * @param listener Oyente a registrar en el Spinner y Slider.
     */
    public void addChangeListener(ChangeListener listener){
        this.spiner.addChangeListener(listener);
        this.slider.addChangeListener(listener);
    }

    /**
     * Retira un oyente de los componentes del panel.
     * @param listener Oyente a retirar en el Spinner y Slider.
     */
    public void removeChangeListener(ChangeListener listener){
        this.spiner.removeChangeListener(listener);
        this.slider.removeChangeListener(listener);
    }

    /**
     * Obtiene el valor mínimo que puede tener el componente.
     * @return
     */
    public int getMin(){
        return this.slider.getMinimum();
    }

    /**
     * Asigna un valor mínimo a alcanzar por el componente.
     * @param min valor mínimo para el componente.
     */
    public void setMin(double min){
        this.slider.setMinimum(Math.round((float)min));
    }

    /**
     * Obtiene el valor máximo que puede tener el componente.
     * @return el valor máximo que puede tener el componente.
     */
    public int getMax() {
        return this.slider.getMaximum();
    }

    /**
     * Asigna el valor máximo a alcanzar por el componente
     * @param max El valor máximo a alcanzar por el componenete.
     */
    public void setMax(double max){
        this.slider.setMaximum(Math.round((float)max));
    }
    /**
     * Obtiene el valor actual del componenete.
     * @return El valor del componente, mostrado en el slider y spinner.
     */
    public int getValue(){
        return this.slider.getValue();
    }
    /**
     * Asigna el valor actual al componente. Actualizando el spinner y slider.
     * @param val Valor a asignar al componente.
     */
    public void setValue(double val){
        this.slider.setValue(Math.round((float)val));
        this.spiner.setValue(val);
    }
    /**
     * Obtiene el eje sobre el que actúa el componenete.
     * @return Eje sobre el que actúa el componente.
     */
    public Axis getAxis(){
        return this.axis;
    }
    /**
     * Asigna el eje sobre el que actúa el componente. Actualizando el título.
     * @param axis Eje sobre el que actúa el componenete.
     */
    public void setAxis(Axis axis){
        this.axis = axis;
        this.setName(axis.name());
        this.setTitle("<html><b>" + axis.name() + "</b>-axis</html>");
    }
    
    private void setTitle(String name){
        this.label.setText(name);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slider = new javax.swing.JSlider();
        spiner = new javax.swing.JSpinner();
        label = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(2147483647, 54));
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        slider.setMajorTickSpacing(90);
        slider.setMaximum(360);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setValue(0);
        add(slider, java.awt.BorderLayout.CENTER);

        spiner.setMinimumSize(new java.awt.Dimension(47, 28));
        spiner.setPreferredSize(new java.awt.Dimension(57, 28));
        this.spiner.setValue(this.slider.getValue());
        add(spiner, java.awt.BorderLayout.EAST);

        label.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText(org.openide.util.NbBundle.getMessage(RotationPan.class, "RotationPan.label.text")); // NOI18N
        add(label, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label;
    private javax.swing.JSlider slider;
    private javax.swing.JSpinner spiner;
    // End of variables declaration//GEN-END:variables



    

}
